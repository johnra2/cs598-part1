digraph G {
	close -> invalidateAllLocks;
	close -> flush;
	parseSignedData -> close;
	close -> ensureOpen;
	close -> close;
	close -> next;
	print -> flush;
	computeDefaultSUID -> flush;
	initialize -> close;
	get -> close;
	close -> rethrowAsIOException;
	parseOldSignedData -> close;
	connectV4 -> flush;
	close -> unlock;
	close -> freeMemory;
	open -> close;
	pop -> close;
	flush -> implFlush;
	accept -> close;
	connect -> flush;
	isLive -> version;
	close -> checkPermission;
	init -> close;
	readFile -> close;
	reset -> close;
	flush -> drain;
	close -> writeLock;
	readDictionaryFile -> close;
	close -> available;
	registerDirectory -> close;
	encode -> flush;
	close -> hasNext;
	run0 -> close;
	flush -> throwIllegalStateException;
	received -> flush;
	implClose -> close;
	close -> closeUnderlying;
	flush -> <clinit>;
	connectV4 -> close;
	run -> close;
	close -> compareAndSet;
	close -> urlNoFragString;
	implClose -> flush;
	implCloseChannel -> close;
	authenticate -> flush;
	writeString -> putLength;
	close -> run;
	closeAll -> close;
	close -> flushBuffer;
	finishEntry -> version;
	close -> implCloseChannel;
	close -> freeBuffers;
	getContentType -> close;
	authenticate -> close;
	flush -> write;
	checkError -> flush;
	justRead -> close;
	close -> end;
	getFromHashMap -> version;
	close -> addSuppressed;
	newBundle -> close;
	close -> close0;
	close -> add;
	copy -> close;
	flush -> reset;
	closeLoaders -> close;
	close -> release;
	write -> flush;
	parseNetscapeCertChain -> close;
	close -> getOutputStream;
	write -> close;
	verify -> close;
	read -> close;
	skip -> close;
	close -> throwIllegal;
	putPrintableString -> writeString;
	next -> close;
	closeChildChannel -> close;
	close -> read;
	close -> checkNewline;
	version -> get;
	close -> min;
	close -> getSecurityManager;
	kill -> close;
	startEntry -> version;
	<init> -> close;
	close -> poll;
	decode -> flush;
	flush -> ensureOpen;
	loadDefaultProperties -> close;
	close -> getAndSet;
	close -> afterUdpClose;
	flush -> getHeaderSize;
	close -> datagramSocketClose;
	flush -> isUnderflow;
	close -> implClose;
	writeString -> getBytes;
	cancel -> close;
	putIA5String -> writeString;
	close -> getUseCaches;
	closeChannel -> close;
	start -> close;
	close -> finishTracking;
	retrieve -> close;
	flush -> flush;
	format -> flush;
	closeServer -> close;
	newLine -> flush;
	checkReadAccess -> close;
	close -> socketClose;
	flush -> getHeader;
	findResource -> close;
	getBytes -> flush;
	close -> <clinit>;
	close -> invoke;
	close -> clear;
	getBytes -> close;
	getInputStream0 -> close;
	format -> close;
	implFlush -> flush;
	close -> detachFromThreadPool;
	finishConnect -> close;
	close -> queueForCleanup;
	unregisterSource -> close;
	writeRequests -> close;
	close -> offer;
	classValueOrNull -> version;
	flush -> arraycopy;
	sent -> flush;
	close -> isEmpty;
	close -> write;
	getKeyStore -> close;
	writeRequests -> flush;
	close -> closeAll;
	finalize -> close;
	close -> disassociate;
	close -> iterator;
	load -> close;
	close -> remove;
	close -> clearPendingIoMap;
	parse -> close;
	close -> keySet;
	close -> skip;
	close -> implCloseSelector;
	close -> getKey;
	close -> entrySet;
	loadPolicies -> close;
	close -> closeServer;
	close -> pop;
	flush -> flushBuffer;
	close -> FindClose;
	close -> socketPreClose;
	toString -> flush;
	close -> <init>;
	close -> lock;
	getCodeSigners -> close;
	checkJar -> close;
	closeAllChannels -> close;
	doConnect -> close;
	writeString -> write;
	close -> isClosed;
	close -> closeLoaders;
	createFile -> close;
	close -> finished;
	connect -> close;
	loadManifest -> close;
	updateProgress -> close;
	finalize -> flush;
	getErrorStream -> close;
	close -> getValue;
}